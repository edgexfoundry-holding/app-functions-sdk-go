//
// Copyright (c) 2019 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package appsdk

import (
	"errors"

	"github.com/edgexfoundry/go-mod-core-contracts/models"

	"github.com/edgexfoundry/app-functions-sdk-go/appcontext"
	"github.com/edgexfoundry/app-functions-sdk-go/pkg/transforms"
)

// SetFunctionsPipeline allows you to define each function to execute and the order in which each function
// will be called as each event comes in.
func (sdk *AppFunctionsSDK) SetFunctionsPipeline(transforms ...func(edgexcontext *appcontext.Context, params ...interface{}) (bool, interface{})) error {
	if len(transforms) == 0 {
		return errors.New("No transforms provided to pipeline")
	}
	sdk.transforms = transforms
	return nil
}

// DeviceNameFilter - Specify the devices of interest to filter for data coming from certain sensors.
// The Filter by Device transform looks at the Event in the message and looks at the devices of interest list,
// provided by this function, and filters out those messages whose Event is for devices not on the
// devices of interest.
// This function will return an error and stop the pipeline if a non-edgex
// event is received or if no data is recieved.
// For example, data generated by a motor does not get passed to functions only interested in data from a thermostat.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) DeviceNameFilter(deviceNames []string) func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.Filter{
		FilterValues: deviceNames,
	}
	return transforms.FilterByDeviceName
}

// ValueDescriptorFilter - Specify the value descriptors of interest to filter for data from certain types of IoT objects,
// such as temperatures, motion, and so forth, that may come from an array of sensors or devices. The Filter by Value Descriptor assesses
// the data in each Event and Reading, and removes readings that have a value descriptor that is not in the list of
// value descriptors of interest for the application.
// This function will return an error and stop the pipeline if a non-edgex
// event is received or if no data is recieved.
// For example, pressure reading data does not go to functions only interested in motion data.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) ValueDescriptorFilter(valueIDs []string) func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.Filter{
		FilterValues: valueIDs,
	}
	return transforms.FilterByValueDescriptor
}

// AESTransform encrypts either a string, []byte, or json.Marshaller type using AES encryption.
// It will return a byte[] of the encrypted data.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) AESTransform(encryptionDetails models.EncryptionDetails) func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.Encryption{
		Key:                 encryptionDetails.Key,
		IntializationVector: encryptionDetails.InitVector,
	}
	return transforms.AESTransform
}

// XMLTransform transforms an EdgeX event to XML.
// It will return an error and stop the pipeline if a non-edgex
// event is received or if no data is recieved.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) XMLTransform() func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.Conversion{}
	return transforms.TransformToXML
}

// JSONTransform transforms an EdgeX event to JSON.
// It will return an error and stop the pipeline if a non-edgex
// event is received or if no data is recieved.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) JSONTransform() func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.Conversion{}
	return transforms.TransformToJSON
}

// HTTPPost will send data from the previous function to the specified Endpoint via http POST. If no previous function exists,
// then the event that triggered the pipeline will be used. Passing an empty string to the mimetype
// method will default to application/json.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) HTTPPost(url string, mimeType string) func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.HTTPSender{
		URL:      url,
		MimeType: mimeType,
	}
	return transforms.HTTPPost
}

// HTTPPostJSON sends data from the previous function to the specified Endpoint via http POST with a mime type of application/json.
// If no previous function exists, then the event that triggered the pipeline will be used.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) HTTPPostJSON(url string) func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	return sdk.HTTPPost(url, "application/json")
}

// HTTPPostXML sends data from the previous function to the specified Endpoint via http POST with a mime type of application/xml.
// If no previous function exists, then the event that triggered the pipeline will be used.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) HTTPPostXML(url string) func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	return sdk.HTTPPost(url, "application/xml")
}

// GZIPTransform compresses data received as either a string,[]byte, or json.Marshaler using gzip algorithm and returns a base64 encoded string as a []byte.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) GZIPTransform() func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.Compression{}
	return transforms.GZIPTransform
}

// ZLIBTransform compresses data received as either a string,[]byte, or json.Marshaler using zlib algorithm and returns a base64 encoded string as a []byte.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) ZLIBTransform() func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	transforms := transforms.Compression{}
	return transforms.ZLIBTransform
}

// MQTTSend sends data from the previous function to the specified MQTT broker.
// If no previous function exists, then the event that triggered the pipeline will be used.
// This function is a configuration function and returns a function pointer.
func (sdk *AppFunctionsSDK) MQTTSend(addr models.Addressable, cert string, key string, qos byte, retain bool, autoreconnect bool) func(*appcontext.Context, ...interface{}) (bool, interface{}) {
	mqttconfig := transforms.NewMqttConfig()
	mqttconfig.SetQos(qos)
	mqttconfig.SetRetain(retain)
	mqttconfig.SetAutoreconnect(autoreconnect)
	sender := transforms.NewMQTTSender(sdk.LoggingClient, addr, cert, key, mqttconfig)
	return sender.MQTTSend
}
